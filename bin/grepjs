#!/usr/bin/env node

const fs = require("fs");
const yargs = require("yargs");

const { grep, grepCount, grepRecursive } = require("../lib/grep");

// Parse command-line options
yargs.locale("en");
const argv = yargs
  .usage("Usage: $0 [options] <pattern> <file>")
  .option("c", {
    alias: "count",
    describe: "Only a count of selected lines is written to standard output.",
    type: "boolean",
  })
  .option("h", {
    alias: "help",
    describe: "Print a brief help message.",
    type: "boolean",
  })
  .option("i", {
    alias: "ignore-case",
    describe:
      "Perform case insensitive matching. By default, it is case sensitive.",
    type: "boolean",
  })
  .option("n", {
    alias: "line-number",
    describe:
      "Each output line is preceded by its relative line number in the file, starting at line 1. The line number counter is reset for each file processed. This option is ignored if -c is specified.",
    type: "boolean",
  })
  .option("r", {
    alias: "recursive",
    describe: "Recursively search subdirectories listed.",
    type: "boolean",
  })
  .option("v", {
    alias: "invert-match",
    describe:
      "Selected lines are those not matching any of the specified patterns.",
    type: "boolean",
  })
  .demandCommand(2, "Please provide both pattern and file arguments.").argv;

const pattern = argv._[0];
const filePath = argv._[1];

if (argv.help) {
  // Print help message and exit
  console.log(argv.help);
  process.exit(0);
}

const options = {
  ignoreCase: argv["ignore-case"],
  invertMatch: argv["invert-match"],
};
const result = argv.recursive
  ? grepRecursive(pattern, filePath, options)
  : grep(pattern, filePath, options);

result
  .then((result) => {
    if (argv.count) {
      console.log(grepCount(result));
    } else {
      printResult(result, argv["line-number"]);
    }
  })
  .catch((error) => {
    console.error("Error:", error.message);
  });

function printResult(result, showLineNumber) {
  let currentFile = null;
  const fileCount = Object.keys(result).length;

  for (const [filePath, lines] of Object.entries(result)) {
    for (const [lineNumber, line] of lines) {
      if (fileCount > 1 && filePath !== currentFile) {
        currentFile = filePath;
        console.log(`\n${filePath}:`);
      }
      if (showLineNumber) {
        console.log(`${lineNumber}: ${line}`);
      } else {
        console.log(line);
      }
    }
  }
}
